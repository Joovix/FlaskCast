Projeto: Aplicação Flask para Download e Conversão de Mídia
Descrição Geral
Esta aplicação usa o Flask para criar uma API que permite baixar e converter arquivos de mídia (áudio e vídeo) diretamente do YouTube. A aplicação utiliza yt-dlp para realizar os downloads e pydub (com FFmpeg) para converter arquivos de áudio para MP3. Além disso, a aplicação usa ngrok para disponibilizar o servidor Flask publicamente.

Estrutura de Diretórios
csharp
Copiar código
project_root/
├── app.py                  # Arquivo principal do Flask
├── config.py               # Configurações da aplicação
├── routes.py               # Definição das rotas Flask
├── download_manager.py     # Gerenciamento de downloads e conversões
├── temp_files.py           # Manutenção de arquivos temporários
├── validation.py           # Validações das requisições
├── static/
│   └── favicon.ico         # Favicon da aplicação
├── templates/
│   └── index.html          # Página inicial do Flask
└── config.ini              # Arquivo de configuração
Configuração do Projeto
config.ini
Arquivo opcional que contém as configurações do servidor e da aplicação. Exemplo de conteúdo:

ini
Copiar código
[server]
debug = true
host = 0.0.0.0
port = 5000

[download]
base_dir = downloads
max_filesize = 104857600  # 100 MB

[ffmpeg]
path = C:/path/to/ffmpeg/bin/ffmpeg.exe

[temp_files]
ttl = 600  # Tempo de vida dos arquivos temporários em segundos
Módulos e Arquivos
app.py
Arquivo principal que configura e inicia o servidor Flask. Inclui:

Configuração do Flask e ngrok:
Configura o Flask com rotas importadas de routes.py.
Usa ngrok para expor o servidor em um URL público, com autenticação via NGROK_AUTH_TOKEN, se configurado.
Inicialização:
Configura init_temp_files para gerenciar arquivos temporários.
Inicia o servidor com as configurações (DEBUG, HOST, PORT) de config.py.
Exemplo de app.py:

python
Copiar código
from flask import Flask
from pyngrok import ngrok
import logging
import threading
from config import DEBUG, HOST, PORT, NGROK_AUTH_TOKEN
from routes import configure_routes
from temp_files import init_temp_files

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
configure_routes(app)

def run_flask():
    app.run(debug=DEBUG, use_reloader=False, host=HOST, port=PORT)

if __name__ == '__main__':
    init_temp_files()
    threading.Thread(target=run_flask).start()
    if NGROK_AUTH_TOKEN:
        ngrok.set_auth_token(NGROK_AUTH_TOKEN)
    public_url = ngrok.connect(PORT)
    logger.info(f"Ngrok public URL: {public_url}")
config.py
Este módulo centraliza as configurações da aplicação. Ele carrega valores de config.ini usando ConfigParser, mas expõe cada configuração como uma variável independente.

Variáveis principais:
DEBUG, HOST, PORT: Configurações do servidor.
BASE_DOWNLOAD_DIR, MAX_FILE_SIZE: Diretório de downloads e tamanho máximo dos arquivos.
FFMPEG_PATH: Caminho do FFmpeg para conversões.
FILE_TTL: Tempo de vida dos arquivos temporários.
SECRET_KEY, NGROK_AUTH_TOKEN: Chave de segurança e token do ngrok.
Exemplo de config.py:

python
Copiar código
import os
import configparser
from pathlib import Path
from pydub import AudioSegment

config = configparser.ConfigParser()
config.read('config.ini')

DEBUG = config.getboolean('server', 'debug', fallback=False)
HOST = config.get('server', 'host', fallback='0.0.0.0')
PORT = config.getint('server', 'port', fallback=5000)
BASE_DOWNLOAD_DIR = Path(config.get('download', 'base_dir', fallback='downloads'))
MAX_FILE_SIZE = config.getint('download', 'max_filesize', fallback=1024 * 1024 * 100)
FFMPEG_PATH = Path(config.get('ffmpeg', 'path', fallback='/usr/bin/ffmpeg'))
FILE_TTL = config.getint('temp_files', 'ttl', fallback=600)
SECRET_KEY = os.getenv('SECRET_KEY', 'default-secret-key')
NGROK_AUTH_TOKEN = os.getenv('NGROK_AUTH_TOKEN', None)

AudioSegment.converter = str(FFMPEG_PATH)
routes.py
Define as rotas do Flask:

Rota /: Renderiza index.html como página inicial.
Rota /favicon.ico: Serve o favicon para evitar erros 404.
Rota /baixar (POST): Processa o download com yt-dlp.
Exemplo de routes.py:

python
Copiar código
from flask import render_template, request, send_file, send_from_directory, current_app
from validation import validate_request
from download_manager import process_download

def configure_routes(app):
    @app.route('/')
    def home():
        return render_template('index.html')

    @app.route('/favicon.ico')
    def favicon():
        return send_from_directory(current_app.static_folder, 'favicon.ico', mimetype='image/vnd.microsoft.icon')

    @app.route('/baixar', methods=['POST'])
    @validate_request
    def baixar():
        entrada = request.form['entrada']
        tipo = request.form['tipo']
        download_request = {'url': entrada, 'tipo': tipo, 'filename': ''}
        buffer, filename, mimetype = process_download(download_request)
        return send_file(buffer, as_attachment=True, download_name=filename, mimetype=mimetype)
download_manager.py
Lida com o download e a conversão de mídia.

Funções principais:
process_download: Usa yt-dlp para baixar a mídia (áudio/vídeo) e converte para MP3, se necessário.
get_yt_dlp_opts: Define as opções de download para yt-dlp.
convert_to_mp3: Converte arquivos de áudio para MP3 usando pydub.
normalize_filename: Normaliza nomes de arquivos removendo caracteres especiais.
Exemplo de download_manager.py:

python
Copiar código
from yt_dlp import YoutubeDL
from pathlib import Path
import io
import re
from config import BASE_DOWNLOAD_DIR, MAX_FILE_SIZE, FFMPEG_PATH
from pydub import AudioSegment
import logging

logger = logging.getLogger(__name__)
AudioSegment.converter = str(FFMPEG_PATH)

def normalize_filename(filename: str) -> str:
    return re.sub(r'[^\w\s-]', '', filename).strip().replace(' ', '_')

def get_yt_dlp_opts(download_path: Path, tipo: str) -> dict:
    return {
        'format': 'bestaudio/best' if tipo == 'musica' else 'bestvideo+bestaudio/best',
        'outtmpl': str(download_path / '%(title)s.%(ext)s'),
        'noprogress': True,
        'quiet': True,
        'restrictfilenames': True,
        'nocheckcertificate': True,
        'noplaylist': True,
        'max_filesize': MAX_FILE_SIZE,
    }

def process_download(download_request) -> tuple[io.BytesIO, str, str]:
    download_dir = BASE_DOWNLOAD_DIR / download_request['tipo']
    download_dir.mkdir(parents=True, exist_ok=True)
    ydl_opts = get_yt_dlp_opts(download_dir, download_request['tipo'])
    search_url = f"ytsearch1:{download_request['url']}" if 'youtube.com' not in download_request['url'] else download_request['url']
    
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(search_url, download=True)
        info = info['entries'][0] if 'entries' in info else info
        downloaded_path = list(download_dir.glob(f"{normalize_filename(info['title'])}.*"))[0]
        final_path = downloaded_path.with_suffix('.mp3') if download_request['tipo'] == 'musica' else downloaded_path
        
        buffer = io.BytesIO(final_path.read_bytes())
        buffer.seek(0)
        final_path.unlink()
        return buffer, final_path.name, 'audio/mpeg' if download_request['tipo'] == 'musica' else 'video/mp4'
temp_files.py
Gerencia a criação e limpeza de arquivos temporários com base no tempo de vida (FILE_TTL).

validation.py
Valida as solicitações da rota /baixar, verificando os campos entrada e tipo.

Funcionamento do Sistema
Inicie o Servidor: Execute app.py para iniciar o servidor Flask.
Rotas de Uso:
GET /: Exibe a página inicial.
POST /baixar: Recebe entrada e tipo, processa o download e retorna o arquivo.
Serviço Público: ngrok conecta o servidor a um URL público.
Com essa documentação, o projeto pode ser recriado do zero, mantendo a mesma funcionalidade e estrutura.