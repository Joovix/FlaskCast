Documentação do Projeto: Aplicação Flask para Download e Conversão de Mídia
Visão Geral
Este projeto é uma API construída com Flask para baixar e converter arquivos de mídia (áudio e vídeo) diretamente do YouTube. A aplicação utiliza yt-dlp para download de mídia e pydub com FFmpeg para converter arquivos de áudio para MP3. A aplicação também integra o ngrok para disponibilizar o servidor publicamente.

Estrutura do Projeto
csharp
Copiar código
project_root/
├── app.py                  # Arquivo principal do Flask
├── config.py               # Configurações da aplicação
├── routes.py               # Definição das rotas do Flask
├── download_manager.py     # Gerenciamento de downloads e conversões
├── temp_files.py           # Manutenção de arquivos temporários
├── validation.py           # Validações das requisições
├── static/
│   └── favicon.ico         # Favicon da aplicação
├── templates/
│   └── index.html          # Página inicial da aplicação
└── config.ini              # Arquivo de configuração externo
Configuração do Projeto
config.ini
O arquivo config.ini armazena as configurações da aplicação, permitindo a personalização de parâmetros como o diretório de download e o tempo de vida dos arquivos temporários. Exemplo de conteúdo:

ini
Copiar código
[server]
debug = true
host = 0.0.0.0
port = 5000

[download]
base_dir = C:/kaue/downloads   # Caminho desejado para downloads
max_filesize = 104857600       # 100 MB

[ffmpeg]
path = C:/path/to/ffmpeg/bin/ffmpeg.exe  # Caminho do FFmpeg

[temp_files]
ttl = 600  # Tempo de vida dos arquivos temporários em segundos
config.py
Centraliza as configurações da aplicação e lê o config.ini usando ConfigParser. Define variáveis globais a serem importadas pelos outros módulos:

DEBUG, HOST, PORT: Configurações do servidor.
BASE_DOWNLOAD_DIR, MAX_FILE_SIZE: Diretório de downloads e limite de tamanho de arquivos.
FFMPEG_PATH: Caminho do executável FFmpeg para conversões.
FILE_TTL: Tempo de vida dos arquivos temporários.
SECRET_KEY, NGROK_AUTH_TOKEN: Chave de segurança e token do ngrok.
Exemplo de config.py:

python
Copiar código
import os
import configparser
from pathlib import Path
from pydub import AudioSegment

config = configparser.ConfigParser()
config.read('config.ini')

DEBUG = config.getboolean('server', 'debug', fallback=False)
HOST = config.get('server', 'host', fallback='0.0.0.0')
PORT = config.getint('server', 'port', fallback=5000)
BASE_DOWNLOAD_DIR = Path(config.get('download', 'base_dir', fallback='C:/kaue/downloads'))
MAX_FILE_SIZE = config.getint('download', 'max_filesize', fallback=1024 * 1024 * 100)
FFMPEG_PATH = Path(config.get('ffmpeg', 'path', fallback='/usr/bin/ffmpeg'))
FILE_TTL = config.getint('temp_files', 'ttl', fallback=600)
SECRET_KEY = os.getenv('SECRET_KEY', 'default-secret-key')
NGROK_AUTH_TOKEN = os.getenv('NGROK_AUTH_TOKEN', None)

AudioSegment.converter = str(FFMPEG_PATH)
Arquivos e Módulos
app.py
O arquivo principal que configura e inicia o servidor Flask. Inclui:

Configuração do Flask e ngrok:

Configura o Flask com rotas importadas de routes.py.
Usa ngrok para expor o servidor em um URL público.
Inicialização de Arquivos Temporários:

Chama init_temp_files para gerenciar arquivos temporários.
Exemplo de app.py:

python
Copiar código
from flask import Flask
from pyngrok import ngrok
import logging
import threading
from config import DEBUG, HOST, PORT, NGROK_AUTH_TOKEN
from routes import configure_routes
from temp_files import init_temp_files

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
configure_routes(app)

def run_flask():
    app.run(debug=DEBUG, use_reloader=False, host=HOST, port=PORT)

if __name__ == '__main__':
    init_temp_files()
    threading.Thread(target=run_flask).start()
    if NGROK_AUTH_TOKEN:
        ngrok.set_auth_token(NGROK_AUTH_TOKEN)
    public_url = ngrok.connect(PORT)
    logger.info(f"Ngrok public URL: {public_url}")
routes.py
Define as rotas da API:

Rota /: Renderiza index.html como página inicial.
Rota /favicon.ico: Serve o favicon.
Rota /baixar (POST): Processa downloads usando yt-dlp.
Exemplo de routes.py:

python
Copiar código
from flask import render_template, request, send_file, send_from_directory, current_app
from validation import validate_request
from download_manager import process_download

def configure_routes(app):
    @app.route('/')
    def home():
        return render_template('index.html')

    @app.route('/favicon.ico')
    def favicon():
        return send_from_directory(current_app.static_folder, 'favicon.ico', mimetype='image/vnd.microsoft.icon')

    @app.route('/baixar', methods=['POST'])
    @validate_request
    def baixar():
        entrada = request.form['entrada']
        tipo = request.form['tipo']
        download_request = {'url': entrada, 'tipo': tipo, 'filename': ''}
        buffer, filename, mimetype = process_download(download_request)
        return send_file(buffer, as_attachment=True, download_name=filename, mimetype=mimetype)
download_manager.py
Gerencia o download e a conversão de mídia:

process_download: Baixa a mídia com yt-dlp, verifica a existência do arquivo baixado e, se for áudio, converte para MP3 usando pydub.
get_yt_dlp_opts: Configura opções de yt-dlp como o formato do arquivo e o caminho de salvamento.
convert_to_mp3: Converte áudio para MP3.
normalize_filename: Normaliza os nomes dos arquivos baixados.
Exemplo de download_manager.py:

python
Copiar código
from yt_dlp import YoutubeDL
from pathlib import Path
import io
import re
import logging
from config import BASE_DOWNLOAD_DIR, MAX_FILE_SIZE, FFMPEG_PATH
from pydub import AudioSegment

logger = logging.getLogger(__name__)
AudioSegment.converter = str(FFMPEG_PATH)

def normalize_filename(filename: str) -> str:
    return re.sub(r'[^\w\s-]', '', filename).strip().replace(' ', '_')

def get_yt_dlp_opts(download_path: Path, tipo: str) -> dict:
    return {
        'format': 'bestaudio/best' if tipo == 'musica' else 'bestvideo+bestaudio/best',
        'outtmpl': str(download_path / '%(title)s.%(ext)s'),
        'noprogress': True,
        'quiet': False,
        'restrictfilenames': True,
        'nocheckcertificate': True,
        'noplaylist': True,
        'max_filesize': MAX_FILE_SIZE,
    }

def convert_to_mp3(input_path: Path, output_path: Path):
    try:
        audio = AudioSegment.from_file(str(input_path))
        audio.export(str(output_path), format="mp3")
    except Exception as e:
        logger.error(f"Erro na conversão para MP3: {e}")
        raise Exception(f"Erro na conversão do arquivo: {str(e)}")

def process_download(download_request) -> tuple[io.BytesIO, str, str]:
    download_dir = BASE_DOWNLOAD_DIR / download_request['tipo']
    download_dir.mkdir(parents=True, exist_ok=True)

    ydl_opts = get_yt_dlp_opts(download_dir, download_request['tipo'])
    search_url = f"ytsearch1:{download_request['url']}" if 'youtube.com' not in download_request['url'] else download_request['url']
    logger.info(f"URL de pesquisa: {search_url}")

    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(search_url, download=True)
        if 'entries' in info:
            info = info['entries'][0]
        
        downloaded_path = Path(info['requested_downloads'][0]['filepath'])
        if not downloaded_path.exists():
            logger.error("Erro: Arquivo não encontrado após o download.")
            raise FileNotFoundError("Arquivo não encontrado após o download.")

        if download_request['tipo'] == 'musica':
            mp3_path = downloaded_path.with_suffix('.mp3')
            convert_to_mp3(downloaded_path, mp3_path)
            downloaded_path.unlink()
            final_path = mp3_path
        else:
            final_path = downloaded_path

        buffer = io.BytesIO(final_path.read_bytes())
        buffer.seek(0)
        final_path.unlink()
        return buffer, final_path.name, 'audio/mpeg' if download_request['tipo'] == 'musica' else 'video/mp4'
temp_files.py
Gerencia os arquivos temporários, incluindo a criação e limpeza periódica:

python
Copiar código
import time
import threading
import logging
from pathlib import Path
from config import BASE_DOWNLOAD_DIR, FILE_TTL

TEMP_DIR = BASE_DOWNLOAD_DIR / "temp"
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def init_temp_files():
    TEMP_DIR.mkdir(parents=True, exist_ok=True)
    cleaner_thread = threading.Thread(target=clean_temp_files)
    cleaner_thread.daemon = True
    cleaner_thread.start()

def save_temp_file(buffer, filename):
    temp_filename = f"{filename}-{int(time.time())}.tmp"
    temp_filepath = TEMP_DIR / temp_filename
    with temp_filepath.open('wb') as f:
        f.write(buffer.getbuffer())
    return str(temp_filepath)

def clean_temp_files():
    while True:
        TEMP_DIR.mkdir(parents=True, exist_ok=True)
        for file in TEMP_DIR.iterdir():
            if file.is_file() and time.time() - file.stat().st_mtime > FILE_TTL:
                try:
                    file.unlink()
                    logger.info(f"Arquivo temporário removido: {file}")
                except OSError as e:
                    logger.error(f"Erro ao remover arquivo: {e}")
        time.sleep(FILE_TTL)
validation.py
Realiza a validação de solicitações, assegurando que os campos necessários (entrada e tipo) estejam presentes:

python
Copiar código
from flask import request, abort
from functools import wraps

def validate_request(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'entrada' not in request.form or 'tipo' not in request.form:
            abort(400, description="Campos obrigatórios ausentes")
        
        tipo = request.form['tipo']
        if tipo not in ['musica', 'video']:
            abort(400, description="Tipo inválido")
        
        return f(*args, **kwargs)
    return decorated_function
Funcionamento do Sistema
Iniciar o Servidor: Executar app.py para iniciar o servidor Flask.
Rotas:
GET /: Exibe a página inicial.
POST /baixar: Recebe entrada e tipo, processa o download e retorna o arquivo.
Serviço Público com ngrok: Disponibiliza o servidor publicamente com ngrok.
Conclusão
Com esta documentação detalhada, você pode recriar o projeto do zero e manter a mesma funcionalidade e estrutura.